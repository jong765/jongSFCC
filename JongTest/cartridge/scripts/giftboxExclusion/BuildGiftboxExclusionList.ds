/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*    @input InputFileName : String   Input file name
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	var productGiftBoxExclusionFileName:String = pdict.InputFileName;
	var productIDs:List = new ArrayList();
	var inReader:FileReader = new FileReader(getGiftBoxExclusionFile(productGiftBoxExclusionFileName));
	var productIdIT:Iterator;
	var stringWriter:StringWriter = new StringWriter();
	var productCount:Number = 0;
	
	try {
		productIDs = inReader.lines;
		productIdIT = productIDs.iterator();
		
		stringWriter.write('<?xml version="1.0" encoding="UTF-8"?>\n');
		stringWriter.write("<catalog>\n");
		
		while (productIdIT.hasNext()) {
			var productId:String = productIdIT.next();
			writeProduct(productId, stringWriter);
			productCount++;
			if (productCount > 2000) {
				stringWriter.flush();
				writeToFileFromStringWriter("productGiftBoxExclusion.xml", stringWriter);
				stringWriter = new StringWriter();
				productCount = 0;
			}
		}
		stringWriter.write("</catalog>\n");
		stringWriter.flush();
		writeToFileFromStringWriter("productGiftBoxExclusion.xml", stringWriter);
		stringWriter.close();
		
	} catch(e) {
		Logger.error("Error occurred while loading product ID array. FileName=" + productGiftBoxExclusionFileName + ".\n Error:" + e);
		return PIPELET_ERROR;
	}
	
   return PIPELET_NEXT;
}

function getGiftBoxExclusionFile(inputFile:String):File {
	
	return new File(File.IMPEX + '/src/operations/' + inputFile);
}

function writeToFileFromStringWriter(fileName:String, stringWriter: StringWriter) {

	var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "operations";

	var folder:File = new File(folderPath);
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result : boolean = folder.mkdirs();
		if ( !result ) {
			Logger.error( "GenerateExportFilename: Error creating temp folder " + folder.fullPath );
		}
	}
	var file:File = new File(folder, fileName);
	var out:FileWriter = new FileWriter(file, true);

	out.write(stringWriter.toString());
	out.flush();
	out.close();

}

function writeProduct(productId:String, stringWriter:StringWriter) {
	stringWriter.write('<product product-id="' + productId + '">\n');
	stringWriter.write('  <custom-attributes>\n');
	stringWriter.write('      <custom-attribute attribute-id="giftboxExclusion">true</custom-attribute>\n');
	stringWriter.write('  </custom-attributes>\n');
	stringWriter.write('</product>\n');
}
