/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.catalog);
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.web );

function execute( args : PipelineDictionary ) : Number
{
	//remove existing file
	var fullFileName:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "bloomreach" + File.SEPARATOR + getCatalogFileName();
	var file:File = new File(fullFileName);
	if (file.exists())
		file.remove();
	
	var stringWriter:StringWriter = new StringWriter();
	
	stringWriter.write('<?xml version="1.0" encoding="utf-8"?>\n');
	stringWriter.write('<catalog>\n');
	stringWriter.write('<categories>\n');
	writeCategories(stringWriter);
	stringWriter.write('</categories>\n');
	stringWriter.write('</catalog>\n');
	
	stringWriter.flush();
	writeToFileFromStringWriter(getCatalogFileName(), stringWriter);
	stringWriter.close();

   return PIPELET_NEXT;
}
 
function writeCategories(stringWriter: StringWriter) {
	var siteCatalog : dw.catalog.Catalog = dw.catalog.CatalogMgr.getSiteCatalog();
	var root : dw.catalog.Category = null;
	
	if(siteCatalog != null)
	{
		root = siteCatalog.getRoot();
	}
	writeCategory(root, stringWriter);	
}

function writeCategory(category: Category, stringWriter: StringWriter) {
	var categoryId: String = category.ID;
	var categoryName: String = category.displayName;
	var parentCategoryId: String = null;
	var categoryCounter:Number = 0;
	
	if (categoryName != null) {
		if (categoryName.indexOf("&") >= 0){
			categoryName = categoryName.replace(/&/g,'&amp;');
		}
		if (categoryName.indexOf("'") >= 0) {
			categoryName = categoryName.replace(/'/g,'&quot;');
		}
		categoryName = categoryName.replace(/\s+/g,' ');
	}
	
	var categoryUrl:String = URLUtils.http('Search-Show', 'cgid', category.ID).toString().replace("staging.web.pacsun.demandware.net", "www.pacsun.com");
	stringWriter.write('   <category id=\'' + category.ID + '\' name=\'' + categoryName + '\'>\n');
	stringWriter.write('       <URL>' + categoryUrl + '</URL>\n');
	stringWriter.write('   </category>\n');

	categoryCounter++;
	
	if (categoryCounter >= 2000) {
		stringWriter.flush();
		writeToFileFromStringWriter(getCatalogFileName(), stringWriter);
		stringWriter.close();
		stringWriter = new StringWriter();
	}
		
	if (category.onlineSubCategories != null && category.onlineSubCategories.length > 0) {
		for each(var cat : Category in category.onlineSubCategories) {
			writeCategory(cat, stringWriter);	
		}	
	}	
}

function getCatalogFileName() : String {
	if (System.getInstanceType() == System.STAGING_SYSTEM)
		return 'Category.xml';
	if (System.getInstanceType() == System.PRODUCTION_SYSTEM)
		return 'Category.xml';
	else
		return 'TestCategory.xml';
}

function writeToFileFromStringWriter(fileName:String, stringWriter: StringWriter) {

	var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "bloomreach";

	var folder:File = new File(folderPath);
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result : boolean = folder.mkdirs();
		if ( !result ) {
			Logger.error( "GenerateExportFilename: Error creating temp folder " + folder.fullPath );
		}
	}

	var file:File = new File(folder, fileName);
	var out:FileWriter = new FileWriter(file, true);

	out.write(stringWriter.toString());	
	out.flush();
	out.close();

}