/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input	InventoryFilePath :	String	
*
*/

importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.object );
importPackage( dw.util );
importPackage( dw.io );
importPackage( dw.catalog );
importPackage( dw.web );

function execute( pdict : PipelineDictionary ) : Number
{
	var inventoryFilePath : String = pdict.InventoryFilePath;
	
	var xmlStream : XMLStreamReader = null;
	var zeroInventoryCount = 0;
	
	try {
		xmlStream = new XMLStreamReader(new FileReader(new File(File.IMPEX + inventoryFilePath)));
		
		while (xmlStream.hasNext()) {
			if (xmlStream.next() == XMLStreamConstants.START_ELEMENT) {
				if (xmlStream.getLocalName() == "allocation") {
					var xmlObj : XML = xmlStream.getXMLObject();
					var test = xmlObj.toXMLString();
					var test2 = 1;
				}
			}
		}
	} catch (e) {
		logError(e);
		return PIPELET_ERROR;
	}  finally {
		if (xmlStream) xmlStream.close();
	}	
	
	
 	return PIPELET_NEXT;
}

function logError(e : Error) {
	var errmsg="Error in line " + e.lineNumber;
	if (e.message) errmsg += ", " + e.message;
	if (e.faultDetail) errmsg += ", " + e.faultDetail;
	errmsg += ", " + e.stack.trim();
		
	Logger.error(errmsg);
}