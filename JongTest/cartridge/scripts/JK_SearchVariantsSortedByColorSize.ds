/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*    @input ProductId : String            Product Id
*    @output Result: String               Result string
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.io );

function execute( pdict : PipelineDictionary ) : Number
{
	var result:String = "<html>";
	var counter:Number = 0;
	
	var products:SeekableIterator = ProductMgr.queryAllSiteProducts();
	
	for each(var product:Product in products) {
		
		if (!product.master) continue;
		var masterProductId:String = product.ID;
	    var productVariationModel:ProductVariationModel = product.variationModel;
		var sortedVariants:Array = getSortedVariants(productVariationModel, product.variants, getVariationAttributeScoreMap(productVariationModel));
		
		if (sortedVariants.length > 0) {
			result+="MasterProductID=" + masterProductId + " Variants=";
			
		    for (var i=0;i < sortedVariants.length;i++) {
		    	var variantProductId:String = sortedVariants[i].productId;
		    	if (i < sortedVariants.length - 1)
		    		result += variantProductId + ", ";
		    	else
		    		result += variantProductId;
		    }
		    result+="</br>";
		}
	}
	result+="</html>";
	writeStringToFile("test", "testresult.html", result);
	pdict.Result = result;

   return PIPELET_NEXT;
}

function getVariationAttributeScoreMap(productVariationModel:ProductVariationModel):HashMap {
	var variationAttributeScoreMap:HashMap = new HashMap();
    var productVariationAttributeIT:Iterator = productVariationModel.getProductVariationAttributes().iterator();
	var coefficient = 100;
	while (productVariationAttributeIT.hasNext()) {
		var productVariationAttribute:ProductVariationAttribute = productVariationAttributeIT.next();
		var scoreMap:HashMap = new HashMap();
		var productVariationAttributeValues:Collection = productVariationModel.getAllValues(productVariationAttribute);
		var productVariationAttributeValuesIT:Iterator = productVariationModel.getAllValues(productVariationAttribute).iterator();
		var loopCounter = 0;
		while (productVariationAttributeValuesIT.hasNext()) {
			var productVariationAttributeValues = productVariationAttributeValuesIT.next();
			var attributeValue = productVariationAttributeValues.value;
			var attributeScore = loopCounter * coefficient;
			scoreMap.put(attributeValue,attributeScore);
			loopCounter++;
		}
		variationAttributeScoreMap.put(productVariationAttribute.attributeID,scoreMap);
		coefficient-=99;
	}
	return variationAttributeScoreMap;
}

function getSortedVariants(productVariationModel:ProductVariationModel, variants:Collection, variationAttributeScoreMap:HashMap):Array {
	var variantMap:HashMap = new HashMap();
	for(var i=0;i<variants.length;i++) {
		var currentVariant:Product = variants[i];
		var currentProductId:String = currentVariant.ID;
		var sortValue = getSortValue(currentVariant, productVariationModel, variationAttributeScoreMap);
		if (sortValue != null)
			variantMap.put(currentProductId, sortValue);
    }
    var sortedVariantArray:Array = sortHashMapByValue(variantMap);
    return sortedVariantArray;
}

function getSortValue(currentVariant:Product, productVariationModel:ProductVariationModel, variationAttributeScoreMap:HashMap):Number {
	var score:Number = 0;
	for each(var VA in productVariationModel.productVariationAttributes) {
		var vaId = VA.getAttributeID();	
		var value;	
    	if (vaId == 'colorCode') {
			value = currentVariant.custom.colorCode;
    	} else if (vaId == 'color') {
    		value = currentVariant.custom.color;
	    } else if (vaId == 'sizeCode') {
    		value = currentVariant.custom.sizeCode;
    	} else if (vaId == 'size') {
    		value = currentVariant.custom.size;
    	}
    	var currentScore = variationAttributeScoreMap.get(vaId).get(value);
    	if (!empty(currentScore) && currentScore != null)
    		score+=variationAttributeScoreMap.get(vaId).get(value);
    	else
    		return null;
    }
    return score;
}

function sortHashMapByValue(obj:HashMap):Array {
    var arr:Array = [];
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            arr.push({
                'productId': prop,
                'value': obj.get(prop)
            });
        }
    }
    arr.sort(function(a, b) { return a.value - b.value; });
    return arr;
}

function writeStringToFile(folderName:String, fileName:String, stringValue:String) {

    var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + folderName;
	var folder:File = new File(folderPath);
	
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result:Boolean = folder.mkdirs();
		if (!result) {
			Logger.error( "GenerateExportFilename: Error creating folder " + folder.fullPath );
		}
	}

	var file:File = new File(folder, fileName);
	var out:FileWriter = new FileWriter(file, false);
	out.write(stringValue);

	out.flush();
	out.close();
}