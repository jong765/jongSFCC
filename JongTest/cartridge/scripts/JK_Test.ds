/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
var Mac = require('dw/crypto/Mac'),
    MessageDigest = require('dw/crypto/MessageDigest'),
    Encoding = require('dw/crypto/Encoding');

function execute( pdict : PipelineDictionary ) : Number
{
    var secretKey = "mRz2DOoknIiXqodxijyBTKn7fwIHUFcS";
    var signature = "",
        mac = new Mac(Mac.HMAC_MD5);

    var params = { uuid: "Ok7fIz9V0jLqER7", email: "enroll_email@yoursite.com" };

    var keys = [];
        for (var key in params) { 
            if (params.hasOwnProperty(key)) { 
                keys.push(key); 
            }
        };
    keys.sort();

    var dataToSign = secretKey;

    for (var i=0; i<keys.length; i++){
        dataToSign += keys[i]+params[keys[i]];
    }

    var dataToSignBytes = new dw.util.Bytes(dataToSign, "UTF-8");
    var secretKeyBytes = Encoding.fromBase64(secretKey);

    //var encryptor : MessageDigest = new MessageDigest("MD5").digest(dataToSign);

    var encryptor : MessageDigest = new MessageDigest('MD5');

    var hash = dw.crypto.Encoding.toHex(encryptor.digestBytes(new dw.util.Bytes(dataToSign)));

    //dataToSign: mRz2DOoknIiXqodxijyBTKn7fwIHUFcSemailenroll_email@yoursite.comuuidOk7fIz9V0jLqER7
    //            mRz2DOoknIiXqodxijyBTKn7fwIHUFcSemailenroll_email@yoursite.comuuidOk7fIz9V0jLqER7

    //var hash = dw.crypto.Encoding.toHex(encryptor.digestBytes(new dw.util.Bytes(lineToHash)));

    if(!empty(dataToSign) && !empty(secretKey)){ 
        hmcaMD5Hash = mac.digest(dataToSignBytes, secretKeyBytes);
        //Generate a Base64-encoded signature
        signature = Encoding.toHex(hmcaMD5Hash);
    }
    //params.sig = crypto.createHash('md5').update(string_to_hash).digest("hex");
    //params.sig = crypto.createHash('md5').update(string_to_hash).digest("hex");

   return PIPELET_NEXT;
}
