/**
 * Initialize SOAP services for a cartridge
 */    
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.io );  

    /**
	 *
	 * SOAP Services
	 *
	 */	 
ServiceRegistry.configure("test.soap11", {
	initServiceClient: function() {
		// authentication is provided by 'key' param and stored in credential object
		// load the WebReference
	    this.census = webreferences.census;
	    // Get the default service.
	    return this.census.getDefaultService();
	},
	createRequest : function(svc: SOAPService, params : Object) : Object {	
		// Create parameter
		var parameter = new this.census.DeFactoSF1Part1ByZip(params.zip, params.key);
		return parameter;
	},
	execute: function(svc:SOAPService, parameter:Object) {
		return svc.serviceClient.deFactoSF1Part1ByZip(parameter);
	},
	parseResponse : function(service: SOAPService, response : Object) : Object {
		 return response.deFactoSF1Part1ByZipResult;
	},
	mockCall : function(service : SOAPService, request : Object) : Object {
		return { status: "MOCKED" };
	}
});

ServiceRegistry.configure("test.soap12", {
	createRequest : function(svc: SOAPService, params : Object) : Object {
		// Use the URL in the WSDL, don't authenticate...
		// svc.URL = "NONE";
		svc.authentication = "NONE";
	
		// load the WebReference
	    var weatherService = webreferences2.weather;
	    
		var weatherServiceSVC = weatherService.getDefaultService();		
		svc.serviceClient = weatherServiceSVC;
		
		var parameter = params.GetCityForecastByZIPSoapIn;
		return parameter;
	},
	execute: function(svc:SOAPService, parameter:Object) {
		return svc.serviceClient.getCityForecastByZIP(parameter);
	},
	parseResponse : function(service: SOAPService, response : XML) : Object {
		return response;
	},
	mockCall : function(service : SOAPService, request : Object) : Object {
		return { status: "MOCKED" };
	}
});