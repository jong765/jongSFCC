/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input EmailAddress    : String  Email address
*   @input FirstName	   : String  First name
*   @input LastName        : String  Last name
*   @input BirthDate 	   : String  Birth date
*   @input Gender          : String  Gender
*   @input StreetAddress   : String  Street address
*   @input StreetAddress2  : String  Street address 2 
*   @input City            : String  City
*   @input State           : String  State
*   @input ZipCode         : String  Zip code
*   @input Country         : String  Country
*   @input CellPhoneNumber : String  Cellular phone number
*   @output PersonUID      : String  Person UID
*
*/
importPackage( dw.system );
importPackage( dw.rpc );

importScript('JongTest:JK_InsertContactAPI_Util.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	// read pipeline dictionary input parameter
	var emailAddress : String = pdict.EmailAddress;
	var firstName : String = pdict.FirstName;
	var lastName : String = pdict.LastName;
	var birthDate : String = pdict.BirthDate;
	var gender : String = pdict.Gender;
	var streetAddress : String = pdict.StreetAddress;
	var streetAddress2 : String = pdict.StreetAddress2;
	var city : String = pdict.City;
	var state : String = pdict.State;
	var zipCode : String = pdict.ZipCode;
	var country : String = pdict.Country;
	var cellPhoneNumber : String = pdict.CellPhoneNumber;
	
	try {

		// get WebReference from WSDL file name
		var webref : WebReference = webreferences.InsertContact;
			
		// get service stub
		var port : Stub = webref.getService('LMIContactAquisition', 'InsertContactPort');
		
		// system name
		var systemName : String = "PSUN";
		
		// systemMethodKey
		var systemMethodKey : String = "testkey111111";
		
		// middle name
		var middleName : String = null;
		
		// prefix
		var prefix : String = null;
		
		// email status code
		var emailStatusCode : String = null;
		
		// person UId
		var personUId : String = null;
		
		// online user indicator
		var onlineUserIndicator : String = "Y";
		
		// fax phone number
		var faxPhoneNum : String = null;
		
		// home phone number
		var homePhoneNum : String = null;
		
		// work phone number
		var workPhoneNum : String = null;
		
		// mobile optin
		var mobileOptIn : String = null;
	
		// never call flag
		var neverCallFlag : String = "N";
		
		// never email flag
		var neverEmailFlag : String = "N";
		
		// never mail flag
		var neverMailFlag : String = "N";
		
		// personal address
		var personalAddress : PersonalAddress = new webref.PersonalAddress(city, country, state, streetAddress, streetAddress2, zipCode);
		
		// list of personal address
		var listOfPersonalAddress : ListOfPersonalAddress = new webref.ListOfPersonalAddress(personalAddress);
		
		// list of social
		var listOfSocial : Array = null;
		
		// list of preference
		var listOfPreference : Array = null;
	
		// contact
		var contact : Contact = new webref.Contact(
			   birthDate, mobileOptIn, cellPhoneNumber, onlineUserIndicator, emailAddress, emailStatusCode,
	           faxPhoneNum, firstName, homePhoneNum, lastName, gender, prefix, middleName, personUId,
	           neverCallFlag, neverEmailFlag, neverMailFlag, workPhoneNum, zipCode, listOfPersonalAddress,
	           listOfSocial, listOfPreference
		);
		
		// list of contact
		var listOfContact : ListOfContact = new webref.ListOfContact(contact);
		
		// request
		var request = new webref.InsertContactSecure_Input(systemName, listOfContact, systemMethodKey);
			
		// call the web service
		var reply = port.insertContactSecure(request); 
		
		// output values
		var existingContact = reply.existingContact;
		pdict.personUId = reply.personUid;
		
	} catch (e) {
		Logger.error("Error in JK_PackageMovementInformationService.ds is: " + e);
		return PIPELET_ERROR;
	}

   	return PIPELET_NEXT;
}
