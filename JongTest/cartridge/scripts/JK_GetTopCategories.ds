/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
    var sortedTopCategoryArray:Array = getSortedTopCategoryArray();
    
    if (sortedTopCategoryArray.length > 0) {
		for (var i=0;i < sortedTopCategoryArray.length;i++) {
		   	var topCategory:Category = sortedTopCategoryArray[i].key;
			if (topCategory.ID.equalsIgnoreCase("brands")) {
				//w
			}	
	   }
	}

   return PIPELET_NEXT;
}


function getSortedTopCategoryArray() : Array {
	
	var siteCatalog:Catalog = dw.catalog.CatalogMgr.getSiteCatalog();
    var topCategoryMap:HashMap = new HashMap();
	var root:Category = null;
	var sortedTopCategoryArray:Array = null;
	var rank:Number = 0;
	
	if(siteCatalog != null)
	{
		root = siteCatalog.getRoot();
	}
	
	if (root.onlineSubCategories != null && root.onlineSubCategories.length > 0) {
		for each(var cat : Category in root.onlineSubCategories) {
			if (cat.isTopLevel()) {
				if (cat.ID.equalsIgnoreCase("mens"))
					rank = 1;
				else if (cat.ID.equalsIgnoreCase("womens"))
					rank = 2;
				else if (cat.ID.equalsIgnoreCase("new-arrivals"))
					rank = 3;
				else if (cat.ID.equalsIgnoreCase("brands"))
					rank = 4;
				else if (cat.ID.equalsIgnoreCase("sale"))
					rank = 999;
				else
					rank = 99;
				topCategoryMap.put(cat, rank);
			}
		}	
	}
	sortedTopCategoryArray = sortHashMapByValue(topCategoryMap);
	return sortedTopCategoryArray;
}

function sortHashMapByValue(obj:HashMap):Array {
    var arr:Array = [];
    for (var prop in obj) {
           arr.push({
               'key': prop,
               'value': obj.get(prop)
           });

    }
    arr.sort(function(a, b) { return a.value - b.value; });
    return arr;
}
