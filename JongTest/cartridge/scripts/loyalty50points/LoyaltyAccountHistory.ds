/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input	RelateCardNumber		:	String
*	@input  RelateLoyaltyAccountId	:	String
*
*/
 importPackage( dw.system );
 importPackage( dw.value ); 
 importPackage( dw.util );
 importPackage( dw.campaign );
 
 importScript("int_relate:/scripts/WsUtil.ds");

function execute( pdict : PipelineDictionary ) : Number
{
	try{
		// Get current date - 7 days in PST
		var searchCal : Calendar = new dw.util.Calendar();
		searchCal.add(Calendar.HOUR,-175);	// search from 1 week ago in PST
		var searchDateStart = searchCal.time.getFullYear() + "-" + LPAD((searchCal.time.getMonth()+1),2) + "-" + searchCal.time.getDate();
		
		var relateCardNumber : String = getRelateCardNumber();
		var relateLoyaltyAccountId : String = getRelateLoyaltyAccountId();
		
		if (relateLoyaltyAccountId != null) {
			
		
			// Get last APP_WEB_LOGIN_50 point issue date;
			var issueDate : String = getIssueDate();
		
		}
		
		

			
			
			if (profile.custom.relateLoyaltyAccountID != null) {

				
				var request = port.getLoyaltyAccountHistory(parameters);
				

			}
		}
		
	} catch(e) {
		Logger.error("Error is: " + e.toString());
		return PIPELET_ERROR;		
	}
		
   return PIPELET_NEXT;
}

function getRelateCardNumber() : String {
	return pdict.RelateCardNumber;
}

function getRelateLoyaltyAccountId() : String {
	return pdict.RelateLoyaltyAccountId;
}

function getPort() : Stub {
	var webref : WebReference = webreferences.LoyaltyAccountServices;
	return getLoyaltyAccountServicesWsPort(webref);
}

function getParameters(relateCardNumber : String, searchDateStart : String) : GetLoyaltyAccountHistory {
	var parameters : GetLoyaltyAccountHistory = new webref.GetLoyaltyAccountHistory();			
	parameters.setCardNumber(relateCardNumber);
	parameters.setSecurityUserId("300");
	parameters.setCardSwiped(false);
	parameters.setHistoryStartDate(searchDateStart);
	parameters.setCurrencyCode("USD");
	return parameters;
}

function getIssueDate() : String {
	var request = getPort().getLoyaltyAccountHistory(getParameters(relateCardNumber, searchDateStart));
	
	var loyaltyAccountList : ArrayList = request._return.instrument.loyaltyAccount;
	for each (var loyaltyAccount : String in loyaltyAccountList) {
		if (loyaltyAccount.loyaltyAccountID.equals(profile.custom.relateLoyaltyAccountID)) {
			var loyaltyActivityList : ArrayList = loyaltyAccount.loyaltyActivityList;
			for each (var loyaltyActivity in loyaltyActivityList) {
				var businessDate = loyaltyActivity.businessDate;
				var ruleName = loyaltyActivity.ruleName;
				var test = 1;
			}
		}
	}
}

function LPAD(num:Number, size:Number):String {
    var s:String = "0000000" + num;
    return s.substr(s.length-size);
}
