/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.io );
importPackage( dw.order );
importPackage( dw.web );
importPackage( dw.net );
importPackage( dw.value );
importPackage( dw.object );


function execute( pdict : PipelineDictionary ) : Number
{
	try{
		if (!SFTPFile()) 
			Logger.error("SFTP error in test.\n");
	} catch(e) {
		logError(e);
		return PIPELET_ERROR;
	}
	
	return PIPELET_NEXT;
}

function SFTPFile() : Boolean {
	var sftp : SFTPClient = new SFTPClient();
	sftp.setTimeout(0);
	
	try {
		var hostName : String = "exttransfer.pacsun.com";
		var userName : String = "dw-psun-cat";
		var passWord : String = "3KPdJVeV";
		var filePath : String = "ShopSpringA/outbound";
		
		if(sftp.connect(hostName, userName, passWord)) {
			Logger.info('Connected to SFTP');
	
			var file : File = new File(File.IMPEX + getCatalogFileName());
		
			if(!file.exists()) {
				return false;
			} else {
				if (sftp.cd(filePath)) {
					var fileTransfer : Boolean = sftp.putBinary(file.name, file);
					sftp.disconnect();
				
					if(fileTransfer == true) {
						return true;
					}
				} else {
					Logger.error("SFTP error: " + sftp.getErrorMessage());
				}
			}
			return false;		
		} else {
			Logger.error("SFTP error: " + sftp.getErrorMessage());
		}
	} catch(e) {
		logError(e);
		return false;
	}
	return false;
}

function logError(e : Error) {
	var errmsg="Error in line " + e.lineNumber;
	if (e.message) errmsg += ", " + e.message;
	if (e.faultDetail) errmsg += ", " + e.faultDetail;
	errmsg += ", " + e.stack.trim();
		
	Logger.error(errmsg);
}

function getCatalogFileName() : String {
	return '/src/channeladvisor/TestFile.txt';
}