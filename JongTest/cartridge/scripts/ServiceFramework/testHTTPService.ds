/**
 * testHTTPClient.ds
 *
 *   @input testType : String the type of test to run.
 *	 @input numCalls : String the number of calls to make.
 *   @input returnCode : String the simulated http return code.
 *	 @output svcConfig : dw.svc.Service the service configuration object.
 *   @output httpResult : dw.svc.Result the http result object.
 *
 */
importPackage( dw.system );
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.io );

function execute( args : PipelineDictionary ) : Number
{
   var service:Service;
   var result:Result;
   var counter = args.numCalls;
   var mockCall = false;
   var pipelineError = false;
   var returnCode = args.returnCode;   
   var requestBody;

   // Execute the request on the service configuration
   function makeCall(svcConfig:Service, params:Object) {
 
      if ( counter == null ){
     	counter = 1;
      }
   
      while ( counter != 0 ){
      	if ( mockCall ) {
     	  result = service.setMock().call(params);
      	} else if ( pipelineError ) {
      	  result = service.setThrowOnError().call(params);	
      	} else {
      	  result = service.call(params);
      	}
     	counter--;
      }
      
      // Set pdict out values
      args.svcConfig = svcConfig;
      args.httpResult = result;
   }
	
   switch ( args.testType ) {
   	
    // make a POST request with additional headers, query param, json payload
   	case "POST":
   	  service = ServiceRegistry.get("test.http.post");
      service.addHeader('Content-Type', 'application/x-www-form-urlencoded');
      service.addParam('sales_assoc', {'ws_user':'DWUser','ws_password':'DinhA2012','sales_assoc_store':'0197','sales_assoc_id':'119257','sales_assoc_pass':'1192574003'});
      break;
 
   }
   
   // Make the service call here
   makeCall(service, requestBody);
   
   if ( result == null || service == null ){
   	  return PIPELET_ERROR;
   }

   return PIPELET_NEXT;
}

