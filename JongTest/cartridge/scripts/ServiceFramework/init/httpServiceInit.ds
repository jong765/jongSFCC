/**
 * Initialize HTTP services for a cartridge
 */
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.io );

   /**
    *
    * HTTP Services
    *
    */
   ServiceRegistry.configure("test.http.get", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("GET");
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		},
		mockCall: function(svc:HTTPService, client:HTTPClient){
		    return {
				statusCode: 200,
				statusMessage: "Success",
				text: "MOCK RESPONSE (" + svc.URL + ")"
			};
		},
		filterLogMessage: function(msg:String) {
			return msg.replace("headers", "OFFWITHTHEHEADERS");
		}
	});
	
	ServiceRegistry.configure("test.http.post", {
		createRequest: function(svc:HTTPService, args){
			// Default request method is post
			// No need to setRequestMethod
			if(args) {
				svc.setRequestMethod("POST");
				svc.addHeader("Content-Type", "application/x-www-form-urlencoded");
				return JSON.stringify(args);
			} else {
				return null;
			}
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	
	ServiceRegistry.configure("test.http.put", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("PUT");
			if(args) {
				svc.addHeader("Content-Type", "text/json");
				return JSON.stringify(args);
			} else {
				return null;
			}
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	
	ServiceRegistry.configure("test.http.delete", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("DELETE");
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	
	ServiceRegistry.configure("test.http.basicauth", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("GET");
			svc.setAuthentication("BASIC");
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	
	ServiceRegistry.configure("test.http.timeout", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("GET");
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	
	
	ServiceRegistry.configure("test.http.status", {
		createRequest: function(svc:HTTPService, args){
			svc.setRequestMethod("GET");
		},
		parseResponse: function(svc:HTTPService, client:HTTPClient) {
			return client.text;
		}
	});
	