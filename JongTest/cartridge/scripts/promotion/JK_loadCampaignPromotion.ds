/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*    @input  PreEffectiveDateDaySpan : String				Pre effective date day span
*    @input  PostEffectiveDateDaySpan : String				Post effective date day span
*    @output DollarOffPromotionList : dw.util.ArrayList		Dollar off promotion list
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.io );

function execute( pdict : PipelineDictionary ) : Number
{
	var preEffectiveDateDaySpan:Number = pdict.PreEffectiveDateDaySpan;
	var postEffectiveDateDaySpan:Number = pdict.PostEffectiveDateDaySpan;
	var xmlStream:XMLStreamReader;
	var logger:Logger = Logger.getLogger("feeds", "promotionExport");
	var promotionObj:Object = {};
	var campaignObj:Object = {};
	var campaignPromotionMap:HashMap = new HashMap();
	var promotionHashMap:HashMap = new HashMap();
	var campaignList:ArrayList = new ArrayList();
	var dollarOffPromotionList:ArrayList = new ArrayList();
	
    try {
		var xmlStream:XMLStreamReader = new XMLStreamReader(new FileReader(new File(File.IMPEX + "/src/test/TestPromotionExport.xml")));
		var ns : Namespace = new Namespace("http://www.demandware.com/xml/impex/promotion/2008-01-31");
		while (xmlStream.hasNext()) {
			if (xmlStream.next() == XMLStreamConstants.START_ELEMENT) {
				// Campaign
				if (xmlStream.getLocalName() == "campaign") {
					var campaign:XML = xmlStream.getXMLObject();
					var enabled_flag:String = campaign.ns::["enabled-flag"].toString();
					if (enabled_flag == "true") {
						campaignObj = {"customerGroup":""};
						campaignObj.campaignId = campaign.attribute("campaign-id").toString();
						campaignObj.description = campaign.ns::description.toString();
						var startDate:String = campaign.ns::["start-date"].toString();
						var endDate:String = campaign.ns::["end-date"].toString();
						if (StringUtils.trim(startDate) == "") {
							campaignObj.start_date = startDate;
						}
						else {
							var tmpdate:Calendar = new Calendar(new Date(startDate));
    						tmpdate.timeZone = "PST";
    						campaignObj.start_date = StringUtils.formatCalendar(tmpdate, "MM/dd/yyyy h:mm a");
						}
						if (StringUtils.trim(endDate) == "") {
							campaignObj.end_date = endDate;
						}
						else {
							var tmpdate:Calendar = new Calendar(new Date(endDate));
    						tmpdate.timeZone = "PST";
    						campaignObj.end_date = StringUtils.formatCalendar(tmpdate, "MM/dd/yyyy h:mm a");
						}
						var customerGroups:XML = campaign.ns::["customer-groups"];
						campaignObj.customerGroup = customerGroups.ns::["customer-group"].attribute("group-id").toString();
						campaignList.add(campaignObj);
					}
				}
				// Promotion
				if (xmlStream.getLocalName() == "promotion") {
					var promotion:XML = xmlStream.getXMLObject();
					var enabled_flag = promotion.ns::["enabled-flag"].toString();
					if (enabled_flag == "true") {
						promotionObj = {"type":"", "threshold":"", "amount":"", "percentage":""};
						promotionObj.promotionId = promotion.attribute("promotion-id").toString();
						promotionObj.name = promotion.ns::name.toString();
						
						var promotionRule:XML = promotion.ns::["order-promotion-rule"];
						var conditionType:String = promotionRule.ns::["discounts"].attribute("condition-type").toString();
						var discounts:XMLList = promotionRule.ns::["discounts"].children();
						if (conditionType.equalsIgnoreCase("product-total"))
							promotionObj.type = "Product";
						else if (conditionType.equalsIgnoreCase("order-total"))
							promotionObj.type = "Order";
						else if (conditionType.equalsIgnoreCase("shiment-total"))
							promotionObj.type = "Shipping";
						// ???? can have more than 1 discount?
						for each (var discount:XML in discounts) {
							var threshold:String = discount.ns::threshold.toString();
							if (threshold != "") {
								promotionObj.threshold = discount.ns::threshold.toString();
								promotionObj.amount = discount.ns::amount.toString();
								promotionObj.percentage = discount.ns::percentage.toString();
							}
						}
						promotionHashMap.put(promotionObj.promotionId, promotionObj);
					}
				}
				// Campaign/Promotion assignment
				if (xmlStream.getLocalName() == "promotion-campaign-assignment") {
					var promotionCampaignAssignment:XML = xmlStream.getXMLObject();
					var campaignId:String = promotionCampaignAssignment.attribute("campaign-id").toString();
					var promotionId:String = promotionCampaignAssignment.attribute("promotion-id").toString();
					var promotionIdList:ArrayList = null;
					
					if (campaignPromotionMap.containsKey(campaignId)) {
    					promotionIdList = campaignPromotionMap.get(campaignId);
    					promotionIdList.add(promotionId);
    				} else {
    					promotionIdList = new ArrayList();
    					promotionIdList.add(promotionId);
    				}
					campaignPromotionMap.put(campaignId, promotionIdList);
				}
			}
		}
    } catch(e) {
		Logger.error("Unable to read promotion feed: "+e.message);
		return PIPELET_ERROR;
	} finally {
		if (xmlStream) xmlStream.close();
		var ww = 1;
    }
    
    // Load dollar off promotion list
    for each (var campaignObj:Object in campaignList) {
    	var currentDate:Date = new Date();
    	var campaignStartDate = new Date(campaignObj.start_date);
		var duration:Number = (campaignStartDate.getTime() - currentDate.getTime())/(1000 * 60 * 60 * 24);
		if (duration >= postEffectiveDateDaySpan * -1 && duration <= preEffectiveDateDaySpan) {
    		// Get promotion from hash map
    		var campaignId:String = campaignObj.campaignId;
    		var promotionIdList:ArrayList = campaignPromotionMap.get(campaignId);
    		
    		for each (var promotionId:String in promotionIdList) {
    			var promotionObj:Object = promotionHashMap.get(promotionId);
    			if (promotionObj.amount != "") {
    				var campaignPromotionObj:Object = {};
    				campaignPromotionObj.campaign = campaignObj;
    				campaignPromotionObj.promotion = promotionObj;
    				dollarOffPromotionList.add(campaignPromotionObj);
    			}
    		}

    	}
    }
    
    pdict.DollarOffPromotionList = dollarOffPromotionList;

   return PIPELET_NEXT;
}
