/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*    @input  cutoffDateMMDDYYYY : String           Cutoff date
*    @input  fileName : String                     File name
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	//Retrieve input variables
	var cutoffDateMMDDYYYY:String = pdict.cutoffDateMMDDYYYY;
	var fileName:String = pdict.fileName;
	
	var profiles:SeekableIterator = null;
	var customerList:List = new ArrayList();
	var customer:Object = null;
	var cutoffDate = new Date(cutoffDateMMDDYYYY);
	var stringWriter:StringWriter = new StringWriter();
	
	try {
		//Select customer profiles missing person UId.
	    profiles = dw.customer.CustomerMgr.queryProfiles("custom.personUID=null", "email");
	    var stringWriter:StringWriter = new StringWriter();
	    
	    //Loop through profiles and write to the file.    
	    while(profiles.hasNext()) {
			var profile:dw.customer.Profile = profiles.next();
			
			//Write to file only if the profile creation date is after the cutoff date.
			if (profile.creationDate > cutoffDate) {
				var emailAddress:String = profile.email;
				var emailOptIn:String;
				if (profile.custom.subscribeNewsletter == null)
					emailOptIn = 'NULL';
				else if (profile.custom.subscribeNewsletter)
					emailOptIn = 'Y';
				else
				    emailOptIn = 'N';
				
				stringWriter.write(emailAddress + "|" + emailOptIn + "\n");
			}
			
		}
	} catch (e) {
		Logger.error("An error occurred while loading arrayList! customerNo=" + customer.customerNo + ",emailAddress=" + customer.emailAddress + ", Error: " + e);
		return PIPELET_ERROR;
	} finally {
		profiles.close();
	}
	
	if (stringWriter.toString().length > 0) {
		stringWriter.flush();
		writeToFileFromStringWriter(fileName, stringWriter);
		stringWriter.close();
	}

   	return PIPELET_NEXT;
}

function writeToFileFromStringWriter(fileName:String, stringWriter: StringWriter) {

	var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "siebel";

	var folder:File = new File(folderPath);
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result : boolean = folder.mkdirs();
		if ( !result ) {
			Logger.error( "GenerateExportFilename: Error creating temp folder " + folder.fullPath );
		}
	}

	var file:File = new File(folder, fileName);
	var out:FileWriter = new FileWriter(file, true);

	out.write(stringWriter.toString());	
	out.flush();
	out.close();

}
