/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@output xmlCategoryPath : String 
*	@output xmlProductPath : String 
*	@output xmlCatAssignPath : String 
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.io );
importPackage( dw.value );
importPackage( dw.object );

function execute( args : PipelineDictionary ) : Number
{
	
	var logger : Logger = Logger.getLogger("feeds", "BuildXMLFromCatalogProducts");
	
	logger.error("Starting BuildXMLFromCatalogProducts");
	
    //This is an attempt to combine all of the current individual 
    //job processes into a single process to save time

	// these are used for pivots since these are the top level categories that determine classification/primary category
	var mens:Category = CatalogMgr.getCategory("mens");
	var womens:Category = CatalogMgr.getCategory("womens");
	var brand:Category = CatalogMgr.getCategory("brands");
	var sale:Category = CatalogMgr.getCategory("sale");
	var clearance:Category = CatalogMgr.getCategory("clearance");
    
    //------------------------------------------------------
    //Brand Info Setup
	var toplevelBrands:HashMap = generateTopBrands();
	var BrandXMLArray:Array = new Array();
	var createdBrands:HashMap = new HashMap();
    //------------------------------------------------------

    //------------------------------------------------------
	//Build Category Info Setup
	var root:Category = CatalogMgr.getCategory("root");
	var fileCategoryName : String = "ip_category.xml";
	var firstCategoryPass : Boolean = true;
	
	var CatArray:Array = new Array(); // category assignments in the regular structure (not brand)
	var CatAssignCleanupArray:Array = new Array(); // removes assignments to the root category
	var BrandCatArray:Array = new Array();  // brand category assignments

	var catMap:HashMap = generateCatHash();
	var brandMap:HashMap = generateBrandHash();
	var newClassificationCat:Category;
    //------------------------------------------------------
	
	//------------------------------------------------------
	//Build Sale Category Info Setup
	var SaleCatArray:Array = new Array(); // sale category assignments 
	//------------------------------------------------------
	
	//------------------------------------------------------
    //Product Info Setup
	var xmlProductItemArray : Array = new Array();
	var fileName : String = "ip_product.xml";
	var firstPass : Boolean = true;
	//------------------------------------------------------

	var catAssignFileName : String = "ip_cat_assign.xml";
	var catAssignFirstPass : Boolean = true;
	
	//------------------------------------------------------
    //Product and Brand Restrictions Info Setup
	var brandRestrictions : Iterator = CustomObjectMgr.getAllCustomObjects('fiftyone_brandRestrictions');
	var countries : Iterator = CustomObjectMgr.getAllCustomObjects('fiftyone_countryList');
	
	var countrySet : Set = new ArrayList();
	var countryArrayList : List = new ArrayList();
	var countryValueList : String = "";
	var brandRestricitonMap : HashMap = new HashMap();
	var brandRestrictionLastModifiedMap:HashMap = new HashMap();
	var brandValueMap : HashMap = new HashMap();
	var currentRestrictions : String;
	var cuurentWhitelistValues : String;

	var currentCountry;
	var currentCountryCode;
	var currentBrandRestriction;
	var xmlRestrictionArray : Array = new Array();
	
	var previousCountryValueList:String = readStringFromFile('fiftyone', 'CountryValueList.txt');

	while(countries.hasNext()) {
		currentCountry = countries.next();
		countrySet.add(currentCountry.custom.country_code);
	}
	
	// Build country code list sorted in alphabetical order
	countryArrayList.addAll(countrySet);
	countryArrayList.sort();
	var sortedCountries:Iterator = countryArrayList.iterator();
	while(sortedCountries.hasNext()) {
		currentCountryCode = sortedCountries.next();
		countryValueList += "<value>" + currentCountryCode + "</value>"; 
	}
	
	writeStringToFile('fiftyone', 'CountryValueList.txt', countryValueList);
	
	var countryListChanged:Boolean;
	var brandRestrictionChanged:Boolean;
	
	if (countryValueList.equalsIgnoreCase(previousCountryValueList)) {
		countryListChanged = false;
	} else
		countryListChanged = true;
	
	while(brandRestrictions.hasNext()) {
		currentBrandRestriction = brandRestrictions.next();
		//Create an array of values
		var countryRestrictions : ArrayList = new ArrayList();
		var countryListing : String = "";
		for each (var restriction : EnumValue in currentBrandRestriction.custom.countryRestrictions) {
			countryRestrictions.add(restriction.value);
			countryListing += "<value>" + restriction.value + "</value>";
		}
		brandRestricitonMap.put(currentBrandRestriction.custom.brand, countryRestrictions);
		brandRestrictionLastModifiedMap.put(currentBrandRestriction.custom.brand, currentBrandRestriction.lastModified);
		brandValueMap.put(currentBrandRestriction.custom.brand, countryListing);
	}
	//------------------------------------------------------
    	
	var productIT:SeekableIterator = ProductMgr.queryAllSiteProducts();
	
	var isNewProduct:Boolean;
	
	var now:Date = new Date();
	var day = 1000*60*60*24;
	
	for each(var product:Product in productIT) {
		
		if (!product.variant) {
		
			var daysElapsedSinceCreation = Math.ceil((now.getTime()-product.creationDate.getTime())/(day));
			
			// New product is defined as the product created less than 2 days ago)
			if (daysElapsedSinceCreation <= 2) 
				isNewProduct = true;
			else
				isNewProduct = false;
			
			// Skip if product is not online and created more than 90 days ago
			if (!product.isOnline() && daysElapsedSinceCreation > 90) {
				continue;
			}
		}
				
	    //------------------------------------------------------
		// 1.  Build Brand Array
	    //------------------------------------------------------
		if(!product.variant) {
			if(!empty(product.custom.brandCode)) {
				// check to see if we've already created the top level brand category
				if(!toplevelBrands.containsKey(product.custom.brandCode)) {
					var brandID : String = MakeIDFromName(product.brand);
					
					// first create the top level brand category
					if(!empty(brandID) && !createdBrands.containsKey(brandID)) {
						BrandXMLArray.push("<category category-id='"+brandID+"'><display-name xml:lang='x-default'><![CDATA["+product.brand+"]]></display-name><online-flag>false</online-flag><parent>brands</parent><custom-attributes><custom-attribute attribute-id='brandCode'><![CDATA["+product.custom.brandCode+"]]></custom-attribute></custom-attributes></category>");
						var brandHash:HashMap = new HashMap();
						
						var recursiveFunc = function (cat : Category, parentID : String) {
							var catID : String = MakeSubCatIDFromNames(product.brand, cat.ID);
							if(!empty(cat.custom.brandCode)) {
								for each(var brandCode:String in cat.custom.brandCode.split("|")) {
									if(!empty(cat.custom.classID)) {
										for each(var classID:String in cat.custom.classID.split("|")) {
											if(!brandHash.containsKey(brandCode+"|"+classID+"|"+cat.ID)) {
												brandHash.put(brandCode+"|"+classID+"|"+catID, cat);
											}	
										}
									} 
								}
							}
							BrandXMLArray.push("<category category-id='"+catID+"'><display-name xml:lang='x-default'><![CDATA["+product.brand+" "+cat.displayName+"]]></display-name><online-flag>false</online-flag><parent>"+parentID+"</parent>");
							BrandXMLArray.push("<custom-attributes>");
							if(!empty(cat.custom.classID)) {
								BrandXMLArray.push("<custom-attribute attribute-id='classID'><![CDATA["+cat.custom.classID+"]]></custom-attribute>");
							}
							BrandXMLArray.push("<custom-attribute attribute-id='brandCode'><![CDATA["+product.custom.brandCode+"]]></custom-attribute>");
							BrandXMLArray.push("</custom-attributes>");
							BrandXMLArray.push("</category>");
							
							if(BrandXMLArray.length > 10000) {								
								logger.error("Writing BrandXMLArray to file, size is: " + BrandXMLArray.length);
								writeToFile(null, fileCategoryName, BrandXMLArray, firstCategoryPass);
								firstCategoryPass = false;
								BrandXMLArray = new Array();
							} 
							
							// now loop through the children
							for each (var subCat:Category in cat.subCategories) {
								recursiveFunc(subCat, catID);	
							}	
						};
						
						recursiveFunc(mens, brandID);
						recursiveFunc(womens, brandID);
					
						var brandObject:Object = {};
						brandObject.cat = brandID;
						brandObject.hash = brandHash;
						brandMap.put(product.custom.brandCode, brandObject);
						createdBrands.put(brandID, product.brand);
					}
					
					toplevelBrands.put(product.custom.brandCode, product.brand);
				}
			}
		}
		//------------------------------------------------------
		
		//------------------------------------------------------
		// 2.  Build Category Assignments
	    //------------------------------------------------------
		newClassificationCat = null;
		var classificationCategoryString:String = "";
		if(!product.variant) {
			xmlProductItemArray.push("<product product-id='"+product.ID+"'>");
		
			if(product.categories.length > 1) {
				CatAssignCleanupArray.push("<category-assignment category-id='root' product-id='"+ product.ID +"' mode='delete'/>\n");
				
				// try to find a new ClassificationCategory from the ones that are already defined
				var classMatch:Boolean = false;
				for each(var cat:Category in product.categories) {
					classMatch = false;
					if(!empty(cat.custom.classID)) {
						for each(var subClass:String in cat.custom.classID.split("|")) {
							if(product.custom.classCode == subClass && (!cat.isSubCategoryOf(sale) && !cat.isSubCategoryOf(clearance))) {
								classMatch = true;
								break;
							}
						}
					}
					if( !empty(product.custom.classCode) && classMatch && empty(cat.custom.brandCode) && (!cat.isSubCategoryOf(sale) && !cat.isSubCategoryOf(clearance))) {
						// we don't care about brands on this pass
						if(!empty(cat.parent) && cat.parent.ID != "root") {
							// this is so we don't get those additional top level categories (Denim, Shoes, Sale) set as the classification category
							newClassificationCat = cat;
						}
					}	
				}
				if(!empty(newClassificationCat)) {
					if(!empty(product.primaryCategory) && product.primaryCategory.ID == newClassificationCat.ID) {
						// then we only need to do the classification update
						if(!newClassificationCat.isSubCategoryOf(sale) && !newClassificationCat.isSubCategoryOf(clearance)) {
							classificationCategoryString += "<classification-category>"+newClassificationCat.ID+"</classification-category>";	
						}
					} else {
						if(!newClassificationCat.isSubCategoryOf(sale) && !newClassificationCat.isSubCategoryOf(clearance)) {
							CatArray.push("<category-assignment category-id='"+cat.ID+"' product-id='"+product.ID+"'><primary-flag>true</primary-flag></category-assignment>\n");
							classificationCategoryString += "<classification-category>"+newClassificationCat.ID+"</classification-category>";
						}
					}
				} else {
					// we have to find it based on the classCode
					var catsToAssign:Array = new Array();	
					if(!empty(product.custom.classCode)) { // make sure its not empty otherwise we got nothing
						for each(var classKey:String in catMap.keySet()) {
							var keyArray : Array = classKey.split("|");
							if(!empty(keyArray) && keyArray.length > 1) {
								if(keyArray[0] == product.custom.classCode) {
									// ok we got one
									// however there more there could be multiples so we have to account for that
									// we'll worry about whether or not to make it primary/classification or not later
									if(!catMap.get(classKey).isSubCategoryOf(sale) && !catMap.get(classKey).isSubCategoryOf(clearance)) {
										catsToAssign.push(catMap.get(classKey));
									}
								}	
							}
						}
						if(catsToAssign.length > 0) {
							// then we found at least one so we can spit out the stuff to remove the product from the root category
							// but first we need to loop through catsToAssign so we can figure out what the classification/primary category should be
							for each(var aCat:Category in catsToAssign) {
								// determine weather its an ancestor of of 'mens' or 'womens'
								var acestor:Category = aCat;
								if(aCat.isSubCategoryOf(mens) || aCat.isSubCategoryOf(womens)) {
									// classification	
									newClassificationCat = aCat;
									if(!aCat.isSubCategoryOf(sale) && !aCat.isSubCategoryOf(clearance)) {
										CatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+product.ID+"'><primary-flag>true</primary-flag></category-assignment>\n");
									}
								} else {
									if(!aCat.isSubCategoryOf(sale) && !aCat.isSubCategoryOf(clearance)) {
										CatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+product.ID+"'></category-assignment>\n");	
									}
								}
							}	
							
							// update the classification category
							if(!empty(newClassificationCat) && (!newClassificationCat.isSubCategoryOf(sale) || !newClassificationCat.isSubCategoryOf(clearance))) {
								classificationCategoryString += "<classification-category>"+newClassificationCat.ID+"</classification-category>";	
							} 
						}
					} // END IF: (!empty(product.custom.classCode))
				}
			} else {  //END IF : (product.categories.length > 1)
				/*
				*	CASE 2:
				*		The Product currently only has one category assignment - to the root.
				*	This should be the path that most of the products that are going to be effected will take
				*	 
				*/
				// then its only assigned to the root category 	
				CatAssignCleanupArray.push("<category-assignment category-id='root' product-id='"+ product.ID +"' mode='delete'/>\n"); // perform root cleanup
				
				// we need to assign categories via classCode
				var catsToAssign:Array = new Array();
				if(!empty(product.custom.classCode)) { // make sure its not empty otherwise we got nothing
					for each(var classKey:String in catMap.keySet()) {
						var keyArray : Array = classKey.split("|");
						if(!empty(keyArray) && keyArray.length > 1) {
							if(keyArray[0] == product.custom.classCode) {
								// ok we got one
								// however there more there could be multiples so we have to account for that
								// we'll worry about whether or not to make it primary/classification or not later
								catsToAssign.push(catMap.get(classKey));
							}	
						}
					}
					if(catsToAssign.length > 0) {
						// then we found at least one so we can spit out the stuff to remove the product from the root category
						// but first we need to loop through catsToAssign so we can figure out what the classification/primary category should be
						for each(var aCat:Category in catsToAssign) {
							// determine weather its an ancestor of of 'mens' or 'womens'
							var acestor:Category = aCat;
							if(aCat.isSubCategoryOf(mens) || aCat.isSubCategoryOf(womens)) {
								// classification	
								newClassificationCat = aCat;
								if(!aCat.isSubCategoryOf(sale) && !aCat.isSubCategoryOf(clearance)) {
									CatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+product.ID+"'><primary-flag>true</primary-flag></category-assignment>\n");
								}
							} else {
								if(!aCat.isSubCategoryOf(sale) && !aCat.isSubCategoryOf(clearance)) {
									CatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+product.ID+"'></category-assignment>\n");	
								}
							}
						}
						// update the classification category
						if(!empty(newClassificationCat)) {
							if(!newClassificationCat.isSubCategoryOf(sale) && !newClassificationCat.isSubCategoryOf(clearance)) {
								classificationCategoryString += "<classification-category>"+newClassificationCat.ID+"</classification-category>";	
							}
						} 
					}
				}
			}
			
			if(!empty(product.custom.brandCode) && !empty(product.custom.classCode)) { 
				// if no brand code then we can't do it
				//
				//	CASE 1:
				//		Product has both a brand and a classCode so we should be able to assign it to a category thats a child of a brand
				//
				// 
				//	ASSUMPTION:
				//		the product will be only assigned to one and ONLY one brand category
				//
				var brandCategory:Category;
				for each(var brandKey:String in brandMap.keySet()) {
					if(	brandKey.indexOf(product.custom.brandCode) != -1) {
						var innerHash:HashMap = brandMap.get(brandKey).hash;
						for each (var key:String in innerHash.keySet()) {
							var keyArray = key.split("|"); // format of key is always brandCode|classCode|categoryID
							if(!empty(keyArray) && keyArray.length > 2) {
								if(keyArray[0] == product.custom.brandCode && keyArray[1] == product.custom.classCode) {
									// this should result in one category - but lets account for multiple just in case
									brandCategory = innerHash.get(key);
									BrandCatArray.push("<category-assignment category-id='"+brandCategory.ID+"' product-id='"+product.ID+"'></category-assignment>\n");	
								}
							}
						}
					}
				}
			} else if(!empty(product.custom.brandCode)) {
				// only the brandCode is there so try to assign it to a brands top level category
				var brandCategory:Category;
				for each(var brandKey:String in brandMap.keySet()) {
					var keyArray : Array = brandKey.split("|"); // format of brand key is always brandCode|classCode|categoryID
					if(!empty(keyArray) && keyArray.length > 2) {
						if(	keyArray[0] == product.custom.brandCode) {
							// this should result in one category - but lets account for multiple just in case
							brandCategory = brandMap.get(brandKey).cat;
							BrandCatArray.push("<category-assignment category-id='"+brandCategory.ID+"' product-id='"+product.ID+"'></category-assignment>\n");	
							break;
						}
					}
				}
			}
		}
		//------------------------------------------------------

		//------------------------------------------------------
		// 3.  Build Sale Category Assignments
	    //------------------------------------------------------
		if (product.master && product.isOnline()) {
			//Now check if the variant has a price that is on sale
			var master : Product = product;
			for(var i=0;i<product.variants.length;i++) {
				var currentVariant : Product = product.variants[i];
				
				if(!empty(currentVariant.priceModel) && !empty(currentVariant.priceModel.getPriceBookPrice("pacsun_sale_price")) && currentVariant.priceModel.getPriceBookPrice("pacsun_sale_price").available) {
					//we have a product for sale, and only need to categorize this once
					if(!('redlines' in product.custom && !empty(product.custom.redlines)) || ('redlinesCode' in product.custom && !empty(product.custom.redlinesCode))) {
						if(empty(master.categories) || (!empty(master.categories) && master.categories.length < 1)) {
							// no categories assigned (again shouldn't happen - but just in case)
							// do the lookup based on the classCode and make sure its a saleCategory
							for each(var classKey:String in catMap.keySet()) {
								var keyArray : Array = classKey.split("|");
								if(!empty(keyArray) && keyArray.length > 1) {
									if(keyArray[0] == master.custom.classCode) {
										var aCat:dw.catalog.Category = catMap.get(classKey);
										if(aCat.isSubCategoryOf(sale) || aCat.isSubCategoryOf(clearance)) {
											// we got it
											SaleCatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+master.ID+"'></category-assignment>\n");
										}
									}	
								}
							}
						} else {
							// loop through the category assignments
							for each (var cat:Category in master.categories) {
								if(cat.isSubCategoryOf(sale) || cat.isSubCategoryOf(clearance)) {
									// this will be the new classification category 
									// and primary category
									SaleCatArray.push("<category-assignment category-id='"+cat.ID+"' product-id='"+master.ID+"'></category-assignment>\n");	
								}
							}
							if(!empty(master.classificationCategory) && !master.classificationCategory.isSubCategoryOf(sale)) {
								// make sure that if the classification categories is specified we don't bother to overwrite it
								var cat:Category = master.classificationCategory;
								for each(var classKey:String in catMap.keySet()) {
									var keyArray : Array = classKey.split("|");
									if(!empty(keyArray) && keyArray.length > 1) {
										if(keyArray[0] == master.custom.classCode) {
											var aCat:dw.catalog.Category = catMap.get(classKey);
											if(aCat.isSubCategoryOf(sale) || aCat.isSubCategoryOf(clearance)) {
												SaleCatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+master.ID+"'></category-assignment>\n");	
											}
										}	
									}
								}
							} else {
								// ok no classification category
								// this should never happen
								for each(var classKey:String in catMap.keySet()) {
									var keyArray : Array = classKey.split("|");
									if(!empty(keyArray) && keyArray.length > 1) {
										if(classKey.indexOf(master.custom.classCode) != -1) {
											var aCat:dw.catalog.Category = catMap.get(classKey);
											if(aCat.isSubCategoryOf(sale) || aCat.isSubCategoryOf(clearance)) {
												SaleCatArray.push("<category-assignment category-id='"+aCat.ID+"' product-id='"+master.ID+"'></category-assignment>\n");	
											}
										}	
									}
								}
							}
						}
					}
					break;					
				}
			}
		}
		//------------------------------------------------------

		//------------------------------------------------------
		// 4.  Build Product Exclusives and product restrictions
	    //------------------------------------------------------
	    if (!product.variant) {
			xmlProductItemArray.push("<custom-attributes>");
			brandRestrictionChanged = false;
	        if (brandRestricitonMap.containsKey(product.brand)) {
				var brandRestrictionItem : dw.util.ArrayList = brandRestricitonMap.get(product.brand);
				var lastModified:Date = brandRestrictionLastModifiedMap.get(product.brand);
				var daysElapsedSinceLastModified = Math.ceil((now.getTime()-lastModified.getTime())/(day));
				brandRestrictionChanged = daysElapsedSinceLastModified < 2;
				
				if (isNewProduct || brandRestrictionChanged || countryListChanged) {
					//Use this list to set the blacklist on the product
					xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_restrictions'>" + brandValueMap.get(product.brand) + "</custom-attribute>");
					currentRestrictions = brandValueMap.get(product.brand);
					if (brandRestrictionItem.empty) {
						//No restrictions, so whitelist all countries
						xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'>" + countryValueList + "</custom-attribute>");
						cuurentWhitelistValues = countryValueList;
					} else if (brandRestrictionItem.contains("ALL")) {
						//All Restricted
						xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'></custom-attribute>");
						cuurentWhitelistValues = "";
					} else {
						//Specific restrictions, need to get the difference between supported and restricted
						//Clone the country set list and then remove any restricted
						var assignedCountries : ArrayList = copyArrayList(countrySet);
						for each(var country : String in brandRestrictionItem) {
							assignedCountries.remove(country);
						}
						xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'>" + transformArrayToCustomValueList(assignedCountries) + "</custom-attribute>");
						cuurentWhitelistValues = transformArrayToCustomValueList(assignedCountries);
					}
				}
			} else {
				currentRestrictions = "";
				
				if (isNewProduct || countryListChanged) {
					if ('fiftyone_restrictions' in product.custom) {
						//First build the restriction list
						var restrictionList : ArrayList = new ArrayList();
						for each (var restriction : EnumValue in product.custom.fiftyone_restrictions) {
							restrictionList.add(restriction.value);
							currentRestrictions += "<value>" + restriction.value + "</value>";
						}
						
						//Now apply
						if (restrictionList.contains("ALL")) {
							xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'></custom-attribute>");
							cuurentWhitelistValues = "";
						} else {
							//Specific restrictions, need to get the difference between supported and restricted
							//Clone the country set list and then remove any restricted
							var assignedCountries : ArrayList = copyArrayList(countrySet);
							for each(var country : String in restrictionList) {
								assignedCountries.remove(country);
							}
							xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'>" + transformArrayToCustomValueList(assignedCountries) + "</custom-attribute>");
							cuurentWhitelistValues = transformArrayToCustomValueList(assignedCountries);
						}
					} else {
						xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'>" + countryValueList + "</custom-attribute>");
						cuurentWhitelistValues = countryValueList;
					}
				}
			}
	    }
	    
		if (product.master) {
			if(product.custom.exclusive) {
				xmlProductItemArray.push("<custom-attribute attribute-id='exclusiveType'><value>online</value></custom-attribute>");
			} else if(!empty(product.custom.pacSunExclusive)) {
				xmlProductItemArray.push("<custom-attribute attribute-id='exclusiveType'><value>pacsun</value></custom-attribute>");
			}
		}
		
		if (!product.variant) {
			if (classificationCategoryString.length > 0)
				xmlProductItemArray.push("</custom-attributes>" + classificationCategoryString + "</product>");
			else
				xmlProductItemArray.push("</custom-attributes></product>");
		}
		
		if (product.master) {
			if (isNewProduct || countryListChanged || brandRestrictionChanged) {
				for each(var variantProduct : Product in product.variants) {
					//use the values for the parent item
					xmlProductItemArray.push("<product product-id='"+variantProduct.ID+"'><custom-attributes>");
					xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_restrictions'>" + currentRestrictions + "</custom-attribute>");
					if (isNewProduct || countryListChanged)
						xmlProductItemArray.push("<custom-attribute attribute-id='fiftyone_whitelist'>" + cuurentWhitelistValues + "</custom-attribute>");
					xmlProductItemArray.push("</custom-attributes></product>");
				}
			}
		}
		
		if (xmlProductItemArray.length >= 8000) {
			writeToFile(null, fileName, xmlProductItemArray, firstPass);
			xmlProductItemArray = new Array();
			firstPass = false;
		}		

		if (xmlProductItemArray.length >= 8000) {
			writeToFile(null, fileName, xmlProductItemArray, firstPass);
			xmlProductItemArray = new Array();
			firstPass = false;
		}		
		//------------------------------------------------------
		
		if (CatAssignCleanupArray.length >= 8000) {
			writeToFile(null, catAssignFileName, CatAssignCleanupArray, catAssignFirstPass);
			CatAssignCleanupArray = new Array();
			catAssignFirstPass = false;
		}

		if (CatArray.length >= 8000) {
			writeToFile(null, catAssignFileName, CatArray, catAssignFirstPass);
			CatArray = new Array();
			catAssignFirstPass = false;
		}

		if (BrandCatArray.length >= 8000) {
			writeToFile(null, catAssignFileName, BrandCatArray, catAssignFirstPass);
			BrandCatArray = new Array();
			catAssignFirstPass = false;
		}

		if (SaleCatArray.length >= 8000) {
			writeToFile(null, catAssignFileName, SaleCatArray, catAssignFirstPass);
			SaleCatArray = new Array();
			catAssignFirstPass = false;
		}
	} // END FOR EACH PRODUCT

	//Close out the catalog
	BrandXMLArray.push("</catalog>");
	if (BrandXMLArray.length > 0) {
		writeToFile(null, fileCategoryName, BrandXMLArray, firstCategoryPass);
		firstCategoryPass = false;
	}
		
	xmlProductItemArray.push("</catalog>");
	if (xmlProductItemArray.length > 0) {
		writeToFile(null, fileName, xmlProductItemArray, firstPass);
		firstPass = false;
	}

	//Add the category assignments to the product file
	// 1. CatAssignCleanup
	if (CatAssignCleanupArray.length > 0) {
		writeToFile(null, catAssignFileName, CatAssignCleanupArray, catAssignFirstPass);
		catAssignFirstPass = false;
	}
	
	// 2. CatArray
	if (CatArray.length > 0) {
		writeToFile(null, catAssignFileName, CatArray, catAssignFirstPass);
		catAssignFirstPass = false;
	}
	
	// 3. BrandCatArray
	if (BrandCatArray.length > 0) {
		writeToFile(null, catAssignFileName, BrandCatArray, catAssignFirstPass);
		catAssignFirstPass = false;
	}
	
	// 4. SaleCatArray
	//Close out the catalog
	SaleCatArray.push("</catalog>");
	if (SaleCatArray.length > 0) {
		writeToFile(null, catAssignFileName, SaleCatArray, catAssignFirstPass);
		catAssignFirstPass = false;
	}
	
	productIT.close();
		
	args.xmlProductPath = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "catalog" + File.SEPARATOR + "ipfeed" + File.SEPARATOR + fileName;
	args.xmlCategoryPath = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "catalog" + File.SEPARATOR + "ipfeed" + File.SEPARATOR + fileCategoryName;
	args.xmlCatAssignPath = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "catalog" + File.SEPARATOR + "ipfeed" + File.SEPARATOR + catAssignFileName;
	
   	return PIPELET_NEXT;
}

function generateTopBrands() : dw.util.HashMap {
	var returnHash:HashMap = new HashMap();
	var brandCat:Category = CatalogMgr.getCategory("brands");
	for each (var brand:Category in brandCat.subCategories) {
		returnHash.put(brand.custom.brandCode, brand);
	}
	return returnHash;
}

function writeToFile(folderPath:String, fileName:String, xmlArray:Array, firstPass:Boolean) {
	if(empty(folderPath)) {
		folderPath = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "catalog" + File.SEPARATOR + "ipfeed";
	}
	var folder:File = new File( folderPath );
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result : boolean = folder.mkdirs();
		if ( !result ) {
			Logger.error( "GenerateExportFilename: Error creating temp folder " + folder.fullPath );
			//return PIPELET_ERROR;
		}
	}
	
	var file:File = new File( folder, fileName);
	var out:FileWriter;
	
	if(firstPass === true) {
		out = new FileWriter(file);
		out.write("<?xml version='1.0' encoding='UTF-8'?>\n");
		out.write("<catalog xmlns='http://www.demandware.com/xml/impex/catalog/2006-10-31' catalog-id='pacsun_storefront_catalog'>\n");
	} else {
		out = new FileWriter(file, true);
	}
	
	for each(var XMLItem : String in xmlArray) {
		out.write(XMLItem);	
	}
	out.flush();
	out.close();

}

function MakeIDFromName(catName:String) : String {
	var catID:String = "";
	if(!empty(catName)) {
		catID = catName.toLowerCase().replace(" ", "-").replace(/[^0-9a-zA-Z \-]+/g,"").replace(/\s/g, "");	
	}
	return catID;	
}

function MakeSubCatIDFromNames(brandName:String, catName:String) : String {
	var catId : String = "";
	if (!empty(catName) && !empty(brandName)) {
		catId = brandName.toLowerCase().replace(" ", "-").replace(/[^0-9a-zA-Z \-]+/g,"").replace(/\s/g, "") + "-"+ catName.toLowerCase().replace(" ", "-").replace(/[^0-9a-zA-Z \-]+/g,"").replace(/\s/g, "");	
	} else if (!empty(catName) && empty(brandName)) {
		catId = catName.toLowerCase().replace(" ", "-").replace(/[^0-9a-zA-Z \-]+/g,"").replace(/\s/g, "");	
	}
	return catId;	
}

function generateCatHash(): dw.util.HashMap {
	var returnHash:HashMap = new HashMap();
	var recursiveFunc = function (cat:Category) {
		if(!empty(cat.custom.classID)) {
			// we can't break up the | here as we'll loose the uniqueness
			for each(var classID:String in cat.custom.classID.split("|")) {
				if(!returnHash.containsKey(classID+"|"+cat.ID)) {
					returnHash.put(classID + "|"+ cat.ID, cat);	
				}
			}
		}
		if(cat.ID != "brands") {
			for each (var subCat:Category in cat.subCategories) {
				recursiveFunc(subCat);	
			}	
		}
	};
	
	recursiveFunc(dw.catalog.CatalogMgr.getCategory("root"));
	return returnHash;
}

function generateBrandHash() : dw.util.HashMap {
	var returnHash:HashMap = new HashMap();
	
	for each(var brand:Category in dw.catalog.CatalogMgr.getCategory("brands").subCategories) {
		// at the end we add the brandHash 
		if(!empty(brand.custom.brandCode)) {
			var brandHash:HashMap = new HashMap();
			
			var recursiveFunc = function (cat:Category) {
				if(!empty(cat.custom.brandCode)) {
					// we have to account for pipe (|) delimited values stored in the brandCode
					for each(var brandCode:String in cat.custom.brandCode.split("|")) {
						var codePrefix:String = "";
						if(!empty(cat.custom.classID)) {
							for each(var classID:String in cat.custom.classID.split("|")) {
								if(!brandHash.containsKey(brandCode+"|"+classID+"|"+cat.ID)) {
									brandHash.put(brandCode+"|"+classID+"|"+cat.ID,cat);
								}	
							}
						} else {
							// for now don't worry about these as products will never be assigned to these categories via this job (nothing to key off of)
						}
							
					}
					
				}
				for each (var subCat:Category in cat.subCategories) {
					recursiveFunc(subCat);	
				}	
			};
			
			for each (var subCat:Category in brand.subCategories) {
				recursiveFunc(subCat);	
			}	
			var brandObject:Object = {};
			brandObject.cat = brand;
			brandObject.hash = brandHash;
			returnHash.put(brand.custom.brandCode, brandObject);
		}
	}
	
	return returnHash;
}

function copyArrayList(list : ArrayList) : ArrayList {
	var output : ArrayList = new ArrayList();
	
	for each (var item in list) {
		output.add(item);	
	}
	return output;
}

function transformArrayToCustomValueList(list : ArrayList) : String {
	//Iterate over the array and produce the string
	var output : String = "";
	for each (var item in list) {
		output += "<value>" + item + "</value>";
	}
	return output;
}

function readStringFromFile(folderName:String, fileName:String):String {
	
	var resultString:String = "";

    var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + folderName;
	var folder:File = new File(folderPath);
	
	if (!folder.exists()){ // if folder doesn't exist - create folder	
		Logger.error("Error reading file: folder " + folder.fullPath + " does not exist");
		return resultString;
	}

	var file:File = new File(folder, fileName);
	if (!file.exists())
		return resultString;
		
	var inReader:FileReader = new FileReader(file);

	while (text = inReader.readLine()) {
		resultString+= text;
	}
	inReader.close();
	return resultString;
}

function writeStringToFile(folderName:String, fileName:String, stringValue:String) {

    var folderPath:String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + folderName;
	var folder:File = new File(folderPath);
	
	if ( !folder.exists() ){ // if folder doesn't exist - create folder	
		var result:Boolean = folder.mkdirs();
		if (!result) {
			Logger.error( "GenerateExportFilename: Error creating folder " + folder.fullPath );
		}
	}

	var file:File = new File(folder, fileName);
	var out:FileWriter = new FileWriter(file, false);
	out.write(stringValue);

	out.flush();
	out.close();
}